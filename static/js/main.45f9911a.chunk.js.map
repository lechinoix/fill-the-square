{"version":3,"sources":["components/Grid/index.js","components/Cell/index.js","App.js","serviceWorker.js","index.js"],"names":["number","isActive","isSelectable","onClick","className","squareRange","i","push","emptyNumberMatrix","j","Array","props","useState","numberMatrix","setNumberMatrix","roundHistory","setRoundHistory","lastCellClicked","last","position","length","x","y","isSelectableOnLine","isSelectableOnDiagonal","reference","newPosition","Math","abs","handleKeyPress","event","keyCode","goBack","lastRound","pop","useEffect","document","addEventListener","removeEventListener","map","_","key","pos","isEqual","setNumber","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45f9911a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport last from \"lodash/last\";\nimport isEqual from \"lodash/isEqual\";\nimport Cell from \"../Cell\";\nimport \"./index.css\";\n\nconst SQUARE_SIZE = 10;\n\nconst squareRange = [];\nfor (var i = 0; i < SQUARE_SIZE; i++) {\n  squareRange.push(i);\n}\n\nconst emptyNumberMatrix = [];\nfor (var j = 0; j < SQUARE_SIZE; j++) {\n  emptyNumberMatrix.push(new Array(SQUARE_SIZE));\n}\n\nexport default (props) => {\n  const [numberMatrix, setNumberMatrix] = useState(emptyNumberMatrix);\n  const [roundHistory, setRoundHistory] = useState([]);\n\n  const setNumber = ({ x, y }) => {\n    if (roundHistory.length > 0 && !isSelectable({ x, y })) return;\n\n    numberMatrix[x][y] = roundHistory.length + 1;\n    setRoundHistory([...roundHistory, { x, y }]);\n    setNumberMatrix([...numberMatrix]);\n  };\n\n  const lastCellClicked = last(roundHistory);\n  const isCellActive = (pos) => isEqual(pos, lastCellClicked);\n\n  const isSelectable = (position) => {\n    return (\n      roundHistory.length > 0 &&\n      !numberMatrix[position.x][position.y] &&\n      (isSelectableOnLine(lastCellClicked, position) ||\n        isSelectableOnDiagonal(lastCellClicked, position))\n    );\n  };\n\n  const isSelectableOnLine = (reference, newPosition) =>\n    (reference.x === newPosition.x &&\n      Math.abs(reference.y - newPosition.y) === 3) ||\n    (reference.y === newPosition.y &&\n      Math.abs(reference.x - newPosition.x) === 3);\n\n  const isSelectableOnDiagonal = (reference, newPosition) =>\n    Math.abs(reference.y - newPosition.y) === 2 &&\n    Math.abs(reference.x - newPosition.x) === 2;\n\n  const handleKeyPress = (event) => {\n    if (event.keyCode !== 85) return;\n\n    goBack();\n  };\n\n  const goBack = () => {\n    if (roundHistory.length === 0) return;\n\n    const lastRound = roundHistory.pop();\n    numberMatrix[lastRound.x][lastRound.y] = null;\n    setNumberMatrix([...numberMatrix]);\n    setRoundHistory([...roundHistory]);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyPress);\n    return () => document.removeEventListener(\"keydown\", handleKeyPress);\n  });\n\n  return (\n    <>\n      <div className=\"grid-wrapper\">\n        {squareRange.map((_, y) => (\n          <div key={y} className=\"line-wrapper\">\n            {squareRange.map((_, x) => (\n              <Cell\n                key={x}\n                isActive={isCellActive({ x, y })}\n                isSelectable={isSelectable({ x, y })}\n                number={numberMatrix[x][y]}\n                onClick={() => setNumber({ x, y })}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <p>To undo an action, hit u or click on this button</p>\n      <button className=\"go-back-button\" onClick={goBack}>\n        Undo\n      </button>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./index.css\";\n\nexport default ({ number, isActive, isSelectable, onClick }) => (\n  <div\n    onClick={onClick}\n    className={`cell ${isActive ? \"active\" : null} ${\n      isSelectable ? \"selectable\" : null\n    }`}\n  >\n    {number}\n  </div>\n);\n","import React from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\n\nfunction App() {\n  return (\n    <section className=\"main-section\">\n      <h1>Fill the square with numbers!</h1>\n      <div className=\"grid-container\">\n        <Grid></Grid>\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}